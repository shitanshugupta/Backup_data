const { validationResult } = require('express-validator');
const jwt = require('jsonwebtoken');
const conn = require('../db_connection').promise();

exports.usereducation = async (req, res, next) => {
    const errors = validationResult(req);

    if (!errors.isEmpty()) {
        return res.status(422).json({ errors: errors.array() });
    }

    try {
        if (
            !req.headers.authorization ||
            !req.headers.authorization.startsWith('Bearer') ||
            !req.headers.authorization.split(' ')[1]
        ) {
            return res.status(422).json({
                message: "Please provide the token",
            });
        }

        const theToken = req.headers.authorization.split(' ')[1];
        const decoded = jwt.verify(theToken, 'the-super-strong-secrect');

        const [courseID] = await conn.execute('select id from courses WHERE courses =?',
            [req.body.education]
        );
        let [row] = await conn.execute(
            "SELECT * FROM `users` WHERE `id`=?",
            [decoded.id]
        );

        if (row[0].step == 3) {
            await conn.execute(
                "update users set education= ? ,step = 0 WHERE `id`=?", [
                courseID[0].id,
                decoded.id]
            );

            [row] = await conn.execute(
                "SELECT * FROM `users` WHERE `id`=?",
                [decoded.id]
            );
            delete row[0].password
            delete row[0].token

            if (row.length > 0) {

                return res.status(201).json({

                    message: row[0]

                });
            }
        } else{
            return res.json({
                message: "Complete previous details."})
        }

    } catch (err) {
        next(err);
    }
}