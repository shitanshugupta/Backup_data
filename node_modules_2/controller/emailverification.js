const { validationResult } = require('express-validator');
const jwt = require('jsonwebtoken');
const conn = require('../db_connection').promise();
exports.verification = async (req, res, next) => {
    const errors = validationResult(req);

    if (!errors.isEmpty()) {
        return res.status(422).json({ errors: errors.array() });
    }

    try {
        if (
            !req.headers.authorization ||
            !req.headers.authorization.startsWith('Bearer') ||
            !req.headers.authorization.split(' ')[1]
        ) {
            return res.status(422).json({
                message: "Please provide the token",
            });
        }

        const theToken = req.headers.authorization.split(' ')[1];
        const decoded = jwt.verify(theToken, 'the-super-strong-secrect');
        const [row] = await conn.execute(
            "SELECT * FROM `users` WHERE `id`=?",
            [decoded.id]
        );
        
        const[rows] = await conn.execute(
            "SELECT * FROM `otp` WHERE `email`=?",
            [row[0].email]
        );
        console.log(rows[0])
        const timestamp = rows[0].otptime
        const current_timestamp = Math.floor(Date.now()/1000)
        if ((current_timestamp-timestamp)> 120) {
            await conn.execute(
                "DELETE FROM otp WHERE email = ?",
                [row[0].email]
            );
    
            return res.json({
                message: "OTP Expired! Please try again"
            })
        } else {
            const tokenotp = rows[0].otp
            const otp = req.body.otp
            console.log(otp)
            if (tokenotp == otp) {
                await conn.execute(
                    "update users set status = ? WHERE `id`=?", [
                    'true',
                    decoded.id
                ]);
                await conn.execute(
                    "delete from otp where email=?", [
                        row[0].email
                ]);

                return res.send({
                    message: "OTP Verified"
                })
            } else if (tokenotp !== otp) {
                return res.json({
                    message: "Incorrect OTP! Please try again."
                })
            }

        }
    } catch (err) {
        next(err);
    }
}